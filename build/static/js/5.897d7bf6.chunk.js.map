{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js","store/actions/orders.js"],"names":["module","exports","Order","props","ingredientsArray","ingredientName","ingredients","push","amount","name","ingredientOutput","map","ing","className","classes","Number","parseFloat","price","toFixed","connect","state","orders","loading","token","auth","userId","dispatch","initOrders","withErrorHandler","useEffect","orderComponets","order","id","Spinner","axios","purchaseStarted","type","actions","orderLoadingStatr","purchaseBurger","orderData","post","then","response","purchaseBurgerSuccess","data","catch","error","purchaseBurgerFailed","queryParams","get","fetchedOrders","key","setOrdersFailed"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,uB,4FCgBXC,MAff,SAAeC,GACb,IAAMC,EAAmB,GACzB,IAAK,IAAIC,KAAkBF,EAAMG,YAC/BF,EAAiBG,KAAK,CAACC,OAAQL,EAAMG,YAAYD,GAAiBI,KAAMJ,IAG1E,IAAMK,EAAmBN,EAAiBO,KAAI,SAAAC,GAAG,OAC/C,iCAAsBA,EAAIH,KAA1B,KAAkCG,EAAIJ,OAAtC,MAAWI,EAAIH,SAEjB,OAAO,sBAAKI,UAAWC,IAAQZ,MAAxB,UACL,8CAAiBQ,KACjB,4BAAG,8CAAiBK,OAAOC,WAAWb,EAAMc,OAAOC,QAAQ,Y,wBCoBhDC,uBATS,SAAAC,GACtB,MAAO,CAAEC,OAAQD,EAAMC,OAAOA,OAAQC,QAASF,EAAMC,OAAOC,QAASC,MAAOH,EAAMI,KAAKD,MAAOE,OAAQL,EAAMI,KAAKC,WAExF,SAAAC,GACzB,MAAO,CACLC,WAAY,SAACJ,EAAOE,GAAR,OAAmBC,EAASC,YAAWJ,EAAOE,QAI/CN,CAA6CS,aAzB5D,SAAgBzB,GACd0B,qBAAU,WACR1B,EAAMwB,WAAWxB,EAAMoB,MAAOpB,EAAMsB,UAEnC,IAEH,IAAIK,EAAiB3B,EAAMkB,OAAOV,KAAI,SAAAoB,GACpC,OAAO,cAAC,EAAD,CAAsBzB,YAAayB,EAAMzB,YAAaW,MAAOc,EAAMd,OAAvDc,EAAMC,OAM3B,OAJI7B,EAAMmB,UACRQ,EAAiB,cAACG,EAAA,EAAD,KAGZ,8BAAMH,MAYsEI,O,gKC9BxEC,EAAkB,WAC7B,MAAO,CAAEC,KAAMC,MAGXC,EAAmB,WACvB,MAAO,CAAEF,KAAMC,MAWJE,EAAiB,SAACC,EAAWjB,GACxC,OAAO,SAAAG,GACLA,EAASY,KACTJ,IAAMO,KAAK,qBAAuBlB,EAAOiB,GAAWE,MAAK,SAAAC,GACvDjB,EAZwB,SAACM,EAAIQ,GACjC,MAAO,CAAEJ,KAAMC,IAAiCN,MAAM,2BAAMS,GAAP,IAAkBR,GAAIA,KAW9DY,CAAsBD,EAASE,KAAKpC,KAAM+B,OAClDM,OAAO,SAAAC,GACRrB,EAVuB,SAACqB,GAC5B,MAAO,CAAEX,KAAMC,IAAgCU,MAAOA,GASzCC,CAAqBD,SAavBpB,EAAa,SAACJ,EAAOE,GAChC,OAAO,SAAAC,GACL,IAAMuB,EAAc,QAAU1B,EAAQ,8BAAgCE,EAAS,IAC/ES,IAAMgB,IAAI,gBAAkBD,GAAaP,MAAK,SAAAC,GAC5CjB,EAASY,KACT,IAbajB,EAaP8B,EAAgB,GAEtB,IAAK,IAAIC,KAAOT,EAASE,KACvBM,EAAc5C,KAAd,2BACKoC,EAASE,KAAKO,IADnB,IAEEpB,GAAIoB,KAGR1B,GArBaL,EAqBM8B,EApBhB,CAAEf,KAAMC,IAAoBhB,OAAQA,QAqBtCyB,OAAM,SAAAC,GACPrB,EAnBkB,SAACqB,GACvB,MAAO,CAAEX,KAAMC,IAA2BU,MAAOA,GAkBpCM,CAAgBN","file":"static/js/5.897d7bf6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3kYZJ\"};","import classes from './Order.module.css'\n\nfunction Order(props) {\n  const ingredientsArray = []\n  for (let ingredientName in props.ingredients) {\n    ingredientsArray.push({amount: props.ingredients[ingredientName], name: ingredientName})\n  }\n\n  const ingredientOutput = ingredientsArray.map(ing => (\n    <span key={ing.name}>{ing.name} ({ing.amount})</span>\n  ))\n  return <div className={classes.Order}>\n    <p>Ingredients: {ingredientOutput}</p>\n    <p><strong>Price: ${Number.parseFloat(props.price).toFixed(2)}</strong></p>\n  </div>\n}\n\nexport default Order","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport axios from '../../axios-orders';\nimport Order from '../../components/Order/Order';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport { initOrders } from '../../store/actions/orders';\n\nfunction Orders(props) {\n  useEffect(() => {\n    props.initOrders(props.token, props.userId)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  var orderComponets = props.orders.map(order => {\n    return <Order key={order.id} ingredients={order.ingredients} price={order.price}/>\n  })\n  if (props.loading) {\n    orderComponets = <Spinner/>\n  }\n\n  return <div>{orderComponets}</div>\n}\n\nconst mapStateToProps = state => {\n  return { orders: state.orders.orders, loading: state.orders.loading, token: state.auth.token, userId: state.auth.userId }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    initOrders: (token, userId) => dispatch(initOrders(token, userId))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios))","import axios from '../../axios-orders'\nimport * as actions from './actionTypes'\n\nexport const purchaseStarted = () => {\n  return { type: actions.PURCHASE_STARTED }\n}\n\nconst orderLoadingStatr= () => {\n  return { type: actions.ORDER_LOADING_START }\n}\n\nconst purchaseBurgerSuccess = (id, orderData) => {\n  return { type: actions.PURCHASE_BURGER_SUCCESS, order: { ...orderData, id: id } }\n}\n\nconst purchaseBurgerFailed = (error) => {\n  return { type: actions.PURCHASE_BURGER_FAILED, error: error }\n}\n\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(orderLoadingStatr())\n    axios.post('/orders.json?auth=' + token, orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData))\n    }).catch( error => {\n      dispatch(purchaseBurgerFailed(error))\n    })\n  }\n}\n\nconst setOrders = (orders) => {\n  return { type: actions.SET_ORDERS, orders: orders }\n}\n\nconst setOrdersFailed = (error) => {\n  return { type: actions.SET_ORDERS_FAILED, error: error }\n}\n\nexport const initOrders = (token, userId) => {\n  return dispatch => {\n    const queryParams = 'auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"'\n    axios.get('/orders.json?' + queryParams).then(response => {\n      dispatch(orderLoadingStatr())\n      const fetchedOrders = []\n\n      for (let key in response.data) {\n        fetchedOrders.push({\n          ...response.data[key],\n          id: key,\n        })\n      }\n      dispatch(setOrders(fetchedOrders))\n    }).catch(error => { \n      dispatch(setOrdersFailed(error))\n    })\n  }\n}"],"sourceRoot":""}