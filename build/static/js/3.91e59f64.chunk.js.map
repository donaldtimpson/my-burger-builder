{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Form/Form.js","components/CheckOut/CheckOutSummary/CheckOutSummary.module.css","containers/ContactData/ContactData.module.css","containers/Checkout/Checkout.module.css","components/CheckOut/CheckOutSummary/CheckOutSummary.js","containers/ContactData/ContactData.js","containers/Checkout/Checkout.js","store/actions/orders.js","components/UI/Input/Input.module.css","components/UI/Form/Form.module.css"],"names":["Input","props","inputElement","validationError","inputClasses","classes","InputElement","isValid","push","Invalid","invalidText","className","ValidationError","elementType","elementConfig","join","value","onChange","options","map","option","label","Form","useState","form","formData","updateFormData","formElements","key","id","config","formValid","el","reduce","acc","val","ContactData","onSubmit","event","preventDefault","element","isDirty","inputIdentifier","state","stateElement","target","validation","validityObject","rules","required","trim","minLength","length","email","test","maxLength","checkValidity","inputChangedHandler","Button","buttonType","disabled","submitTitle","module","exports","CheckOutSummary","style","width","margin","alignContent","Burger","ingredients","price","toFixed","onClick","cancelHandler","continueHandler","connect","burger","loading","orders","purchased","token","auth","userId","dispatch","purchaseBurger","order","withErrorHandler","withRouter","name","type","placeholder","street","city","zipCode","deliveryMethod","to","Spinner","orderForm","customer","address","axios","purchaseStarted","Checkout","history","goBack","replace","path","match","url","component","actions","orderLoadingStatr","orderData","post","then","response","purchaseBurgerSuccess","data","catch","error","purchaseBurgerFailed","initOrders","queryParams","get","fetchedOrders","setOrdersFailed"],"mappings":"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","file":"static/js/3.91e59f64.chunk.js","sourcesContent":["import classes from \"./Input.module.css\";\n\nfunction Input(props) {\n  let inputElement = null\n  let validationError = null;\n  const inputClasses = [classes.InputElement]\n  \n  if (props.isValid === false) {\n    inputClasses.push(classes.Invalid)\n    if (props.invalidText) {\n      validationError = <p className={classes.ValidationError}>{props.invalidText}</p>;\n    }\n  }\n\n  switch (props.elementType) {\n    case ('textarea'):\n      inputElement = <textarea {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.onChange}/>\n      break\n    case ('select'):\n      inputElement = <select className={inputClasses.join(' ')} value={props.value} onChange={props.onChange}>\n        {props.elementConfig.options.map(option => {\n          return <option value={option} key={option}>{option}</option>\n        })}\n      </select>\n      break\n    default:\n      inputElement = <input {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.onChange}/>\n  }\n  \n  return <div className={classes.Input}>\n    <label className={classes.label}>{props.label}</label>\n    {inputElement} \n    {validationError}\n  </div>\n}\n\nexport default Input","import { useState } from 'react'\nimport Button from '../Button/Button'\nimport Input from '../Input/Input'\nimport classes from './Form.module.css'\n\nfunction Form(props) {\n  const [formData, updateFormData] = useState(props.form)\n  \n  const checkValidity = (value, rules) => {\n    let isValid = true;\n    let invalidText = null;\n    if (rules.required) {\n      isValid = value.trim() !== ''\n      invalidText = isValid ? null : 'Field is required.'\n    }\n    if (isValid && rules.minLength) {\n      isValid = value.length >= rules.minLength\n      invalidText = isValid ? null : 'Must contain at least ' + rules.minLength + ' characters.'\n    }\n    if (isValid && rules.email) {\n      isValid = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(value)\n      invalidText = 'Must be a valid email'\n    }\n    if (isValid && rules.maxLength) {\n      isValid = value.length <= rules.maxLength\n      invalidText = isValid ? null : 'Must not contain more than ' + rules.maxLength + ' characters.'\n    }\n    return {isValid: isValid, invalidText: invalidText}\n  }\n\n  const inputChangedHandler = (inputIdentifier, event) => {\n    const state = { ...formData }\n    const stateElement = { ...state[inputIdentifier] }\n    stateElement.value = event.target.value\n    stateElement.isDirty = true\n    if (stateElement.validation) {\n      let validityObject = checkValidity(stateElement.value, stateElement.validation)\n      stateElement.isValid = validityObject.isValid\n      stateElement.invalidText = validityObject.invalidText\n    }\n    state[inputIdentifier] = stateElement\n    updateFormData(state)\n  }\n  \n  const onSubmitHandler = (event) => {\n    event.preventDefault()\n    props.onSubmit(formData)\n  }\n\n  const formElements = []\n  for (let key in formData) {\n    formElements.push({\n      id: key,\n      config: formData[key],\n    })\n  }\n  const formValid = formElements.map(el => el.config.isValid ?? true)\n    .reduce((acc, val) => acc && val, true)\n\n  return <div className={classes.ContactData}>\n    <form onSubmit={onSubmitHandler}>\n      {formElements.map(element => {\n        return <Input \n          elementType={element.config.elementType} \n          elementConfig={element.config.config} \n          value={element.config.value} \n          key={element.id}\n          isValid={(element.config.isValid ?? true) || element.config.isDirty === false}\n          invalidText={element.config.invalidText}\n          onChange={(event) => {inputChangedHandler(element.id, event)}}/>\n      })}\n      <Button buttonType=\"Success\" disabled={!formValid}>{props.submitTitle}</Button>\n    </form>\n  </div>\n}\n\nexport default Form","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckOutSummary\":\"CheckOutSummary_CheckOutSummary__2beJp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3ArQ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"Checkout_Checkout__1OoAc\"};","import Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\nimport classes from './CheckOutSummary.module.css'\n\nfunction CheckOutSummary(props) {\n  return <div className={classes.CheckOutSummary}>\n    <h1>We hope is tastes well!</h1>\n    <div style={{width: '100%', margin: 'auto', alignContent: 'left'}}>\n      <Burger ingredients={props.ingredients}/>\n    </div>\n    <p><strong>Price: ${props.price.toFixed(2)}</strong></p>\n    <Button buttonType=\"Danger\" onClick={props.cancelHandler}>CANCEL</Button>\n    <Button buttonType=\"Success\" onClick={props.continueHandler}>CONTINUE</Button>\n  </div>\n}\n\nexport default CheckOutSummary","import { connect } from 'react-redux';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport axios from '../../axios-orders';\nimport Form from '../../components/UI/Form/Form';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport { purchaseBurger } from '../../store/actions/orders';\nimport classes from './ContactData.module.css';\n\nfunction ContactData(props) {\n  const form = {\n    name: { \n      elementType: 'input', \n      config: { type: 'text', placeholder: 'Enter Name' }, \n      value: '',\n      isDirty: false, \n      validation: { required: true }, \n      isValid: false,\n      invalidText: null},\n    email: { \n      elementType: 'input', \n      config: { type: 'email', placeholder: 'Enter Email' }, \n      value: props.email,\n      isDirty: true, \n      validation: { required: true, email: true }, \n      isValid: true,\n      invalidText: null},\n    street: { \n      elementType: 'input', \n      config: { type: 'text', placeholder: 'Street Address' }, \n      value: '',\n      isDirty: false, \n      validation: { required: true }, \n      isValid: false,\n      invalidText: null},\n    city: { \n      elementType: 'input', \n      config: { type: 'text', placeholder: 'City' }, \n      value: '',\n      isDirty: false, \n      validation: { required: true }, \n      isValid: false,\n      invalidText: null},\n    state: { \n      elementType: 'input', \n      config: { type: 'text', placeholder: 'State' }, \n      value: '',\n      isDirty: false, \n      validation: { required: true }, \n      isValid: false,\n      invalidText: null},\n    zipCode: { \n      elementType: 'input', \n      config: { type: 'text', \n      placeholder: 'Postal Code' }, \n      value: '',\n      isDirty: false, \n      validation: { required: true, minLength: 5, maxLength: 5 }, \n      isValid: false,\n      invalidText: null},\n    deliveryMethod: { \n      elementType: 'select', \n      config: { options: ['Fastest', 'Cheapest'] }, \n      value: 'Fastest',\n      isDirty: true},\n  }\n\n  const onSubmitHandler = (orderForm) => {\n    const order = {\n      ingredients: props.ingredients,\n      price: props.price,\n      deliveryMethod: orderForm.deliveryMethod.value,\n      userId: props.userId,\n      customer: {\n        name: orderForm.name.value,\n        email: orderForm.email.value,\n        address: {\n          street: orderForm.street.value,\n          city: orderForm.city.value,\n          state: orderForm.state.value,\n          zipCode: orderForm.zipCode.value,\n        }\n      },\n    }\n    props.purchaseBurger(order, props.token)\n  }\n\n  if (props.purchased) {\n    return <Redirect to=\"/\"/>\n  }\n\n  return <div className={classes.ContactData}>\n    <h4>Enter your Contact Data</h4>\n    {props.loading \n    ? <Spinner /> \n    : <Form form={form} onSubmit={onSubmitHandler} submitTitle={'ORDER'}/>}\n  </div>\n}\n\nconst mapStateToProps = state => {\n  return { \n    ingredients: state.burger.ingredients, \n    price: state.burger.price, \n    loading: state.orders.loading, \n    purchased: state.orders.purchased, \n    token: state.auth.token, \n    userId: state.auth.userId,\n    email: state.auth.email,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return { \n    purchaseBurger: (order, token) => dispatch(purchaseBurger(order, token)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(withRouter(ContactData), axios))","import { connect } from 'react-redux'\nimport { Redirect, Route, withRouter } from 'react-router-dom'\nimport CheckOutSummary from '../../components/CheckOut/CheckOutSummary/CheckOutSummary'\nimport { purchaseStarted } from '../../store/actions/orders'\nimport ContactData from '../ContactData/ContactData'\nimport classes from './Checkout.module.css'\n\nfunction Checkout(props) {\n  const cancelHandler = () => { \n    props.history.goBack()\n  }\n  const continueHandler = () => {\n    props.purchaseStarted()\n    props.history.replace('/checkout/contact-data')\n  }\n  if (!props.ingredients) {\n    return <Redirect to=\"/\"/>\n  }\n\n  return <div className={classes.Checkout}>\n    <CheckOutSummary ingredients={props.ingredients} cancelHandler={cancelHandler} continueHandler={continueHandler} price={props.price}/>\n    <Route path={props.match.url + '/contact-data'} component={ContactData}/>\n  </div>\n}\n\nconst mapStateToProps = state => {\n  return { ingredients: state.burger.ingredients, price: state.burger.price }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return { \n    purchaseStarted: () => dispatch(purchaseStarted()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Checkout))","import axios from '../../axios-orders'\nimport * as actions from './actionTypes'\n\nexport const purchaseStarted = () => {\n  return { type: actions.PURCHASE_STARTED }\n}\n\nconst orderLoadingStatr= () => {\n  return { type: actions.ORDER_LOADING_START }\n}\n\nconst purchaseBurgerSuccess = (id, orderData) => {\n  return { type: actions.PURCHASE_BURGER_SUCCESS, order: { ...orderData, id: id } }\n}\n\nconst purchaseBurgerFailed = (error) => {\n  return { type: actions.PURCHASE_BURGER_FAILED, error: error }\n}\n\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(orderLoadingStatr())\n    axios.post('/orders.json?auth=' + token, orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData))\n    }).catch( error => {\n      dispatch(purchaseBurgerFailed(error))\n    })\n  }\n}\n\nconst setOrders = (orders) => {\n  return { type: actions.SET_ORDERS, orders: orders }\n}\n\nconst setOrdersFailed = (error) => {\n  return { type: actions.SET_ORDERS_FAILED, error: error }\n}\n\nexport const initOrders = (token, userId) => {\n  return dispatch => {\n    const queryParams = 'auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"'\n    axios.get('/orders.json?' + queryParams).then(response => {\n      dispatch(orderLoadingStatr())\n      const fetchedOrders = []\n\n      for (let key in response.data) {\n        fetchedOrders.push({\n          ...response.data[key],\n          id: key,\n        })\n      }\n      dispatch(setOrders(fetchedOrders))\n    }).catch(error => { \n      dispatch(setOrdersFailed(error))\n    })\n  }\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Fomr\":\"Form_Fomr__3nJ9t\"};"],"sourceRoot":""}