{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Form/Form.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.module.css","components/UI/Form/Form.module.css"],"names":["Input","props","inputElement","validationError","inputClasses","classes","InputElement","isValid","push","Invalid","invalidText","className","ValidationError","elementType","elementConfig","join","value","onChange","options","map","option","label","Form","useState","form","formData","updateFormData","formElements","key","id","config","formValid","el","reduce","acc","val","ContactData","onSubmit","event","preventDefault","element","isDirty","inputIdentifier","state","stateElement","target","validation","validityObject","rules","required","trim","minLength","length","email","test","maxLength","checkValidity","inputChangedHandler","Button","buttonType","disabled","submitTitle","module","exports","connect","loading","auth","error","token","buildingBurger","burger","building","dispatch","authenticate","password","isSignIn","updateSignIn","to","Auth","type","placeholder","signInForm","onClick"],"mappings":"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","file":"static/js/4.cfe3d78b.chunk.js","sourcesContent":["import classes from \"./Input.module.css\";\n\nfunction Input(props) {\n  let inputElement = null\n  let validationError = null;\n  const inputClasses = [classes.InputElement]\n  \n  if (props.isValid === false) {\n    inputClasses.push(classes.Invalid)\n    if (props.invalidText) {\n      validationError = <p className={classes.ValidationError}>{props.invalidText}</p>;\n    }\n  }\n\n  switch (props.elementType) {\n    case ('textarea'):\n      inputElement = <textarea {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.onChange}/>\n      break\n    case ('select'):\n      inputElement = <select className={inputClasses.join(' ')} value={props.value} onChange={props.onChange}>\n        {props.elementConfig.options.map(option => {\n          return <option value={option} key={option}>{option}</option>\n        })}\n      </select>\n      break\n    default:\n      inputElement = <input {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.onChange}/>\n  }\n  \n  return <div className={classes.Input}>\n    <label className={classes.label}>{props.label}</label>\n    {inputElement} \n    {validationError}\n  </div>\n}\n\nexport default Input","import { useState } from 'react'\nimport Button from '../Button/Button'\nimport Input from '../Input/Input'\nimport classes from './Form.module.css'\n\nfunction Form(props) {\n  const [formData, updateFormData] = useState(props.form)\n  \n  const checkValidity = (value, rules) => {\n    let isValid = true;\n    let invalidText = null;\n    if (rules.required) {\n      isValid = value.trim() !== ''\n      invalidText = isValid ? null : 'Field is required.'\n    }\n    if (isValid && rules.minLength) {\n      isValid = value.length >= rules.minLength\n      invalidText = isValid ? null : 'Must contain at least ' + rules.minLength + ' characters.'\n    }\n    if (isValid && rules.email) {\n      isValid = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(value)\n      invalidText = 'Must be a valid email'\n    }\n    if (isValid && rules.maxLength) {\n      isValid = value.length <= rules.maxLength\n      invalidText = isValid ? null : 'Must not contain more than ' + rules.maxLength + ' characters.'\n    }\n    return {isValid: isValid, invalidText: invalidText}\n  }\n\n  const inputChangedHandler = (inputIdentifier, event) => {\n    const state = { ...formData }\n    const stateElement = { ...state[inputIdentifier] }\n    stateElement.value = event.target.value\n    stateElement.isDirty = true\n    if (stateElement.validation) {\n      let validityObject = checkValidity(stateElement.value, stateElement.validation)\n      stateElement.isValid = validityObject.isValid\n      stateElement.invalidText = validityObject.invalidText\n    }\n    state[inputIdentifier] = stateElement\n    updateFormData(state)\n  }\n  \n  const onSubmitHandler = (event) => {\n    event.preventDefault()\n    props.onSubmit(formData)\n  }\n\n  const formElements = []\n  for (let key in formData) {\n    formElements.push({\n      id: key,\n      config: formData[key],\n    })\n  }\n  const formValid = formElements.map(el => el.config.isValid ?? true)\n    .reduce((acc, val) => acc && val, true)\n\n  return <div className={classes.ContactData}>\n    <form onSubmit={onSubmitHandler}>\n      {formElements.map(element => {\n        return <Input \n          elementType={element.config.elementType} \n          elementConfig={element.config.config} \n          value={element.config.value} \n          key={element.id}\n          isValid={(element.config.isValid ?? true) || element.config.isDirty === false}\n          invalidText={element.config.invalidText}\n          onChange={(event) => {inputChangedHandler(element.id, event)}}/>\n      })}\n      <Button buttonType=\"Success\" disabled={!formValid}>{props.submitTitle}</Button>\n    </form>\n  </div>\n}\n\nexport default Form","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"ValidationError\":\"Auth_ValidationError__3vFeQ\"};","import { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\nimport Button from \"../../components/UI/Button/Button\"\nimport Form from \"../../components/UI/Form/Form\"\nimport Spinner from \"../../components/UI/Spinner/Spinner\"\nimport { authenticate } from \"../../store/actions/auth\"\nimport classes from \"./Auth.module.css\"\n\nfunction Auth(props) {\n  const [isSignIn, updateSignIn] = useState(true)\n  const form = {\n    email: { \n      elementType: 'input', \n      config: { type: 'email', placeholder: 'Enter Email' }, \n      value: '',\n      isDirty: false, \n      validation: { required: true, email: true }, \n      isValid: false,\n      invalidText: null},\n    password: { \n      elementType: 'input', \n      config: { type: 'password', placeholder: 'Enter Password' }, \n      value: '',\n      isDirty: false, \n      validation: { required: true, minLength: 7 }, \n      isValid: false,\n      invalidText: null},\n  }\n\n  const onSubmitHandler = (signInForm) => {\n    props.authenticate(signInForm.email.value, signInForm.password.value, isSignIn)\n  }\n\n  if (props.token !== null) {\n    if (props.buildingBurger) {\n      return <Redirect to=\"/checkout\"/>\n    } else {\n      return <Redirect to=\"/burger-builder\"/>\n    }\n  }\n\n  return <div className={classes.Auth}>\n    <h3>Please Enter to {isSignIn ? 'Sign In' : 'Sign Up'}</h3>\n    {props.loading \n    ? <Spinner /> \n    : <Form form={form} onSubmit={onSubmitHandler} submitTitle={isSignIn ? 'SIGN IN' : 'SIGN UP'}/>}\n    <Button buttonType=\"Danger\" onClick={() => updateSignIn(!isSignIn)}>{isSignIn ? 'SWITCH TO SIGN UP' : 'SWITCH TO SIGN IN'}</Button>\n    {props.error ? <p className={classes.ValidationError}>{props.error}</p> : null}\n  </div>\n}\n\nconst mapStateToProps = state => {\n  return { loading: state.auth.loading, error: state.auth.error, token: state.auth.token, buildingBurger: state.burger.building }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return { \n    authenticate: (email, password, isSignIn) => dispatch(authenticate(email, password, isSignIn)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Fomr\":\"Form_Fomr__3nJ9t\"};"],"sourceRoot":""}